#!/bin/bash

set -euo pipefail
if [[ "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_VERBOSE:-false}" =~ (true|on|1) ]]; then
  echo "Will run verbose mode"
  set -x
fi


PLUGIN_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)/.."
MAX_SIZE=1024 # in KB

echo "--- :junit: Verify Directory"

if [ ! -d "$BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_DIRECTORY" ]; then
  echo "$BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_DIRECTORY does not exist."
fi

annotation_dir="$(pwd)/$(mktemp -d "junit-annotate-plugin-annotation-tmp.XXXXXXXXXX")"
annotation_path="${annotation_dir}/annotation.md"
annotation_style="info"
fail_build=0
has_errors=0
create_annotation=0

function cleanup {
  rm -rf "${annotation_dir}"
}

function check_size {
  local size_in_kb
  size_in_kb=$(du -k "${annotation_path}" | cut -f 1)
  [ "${size_in_kb}" -lt "${MAX_SIZE}" ]
}

trap cleanup EXIT

xmls_dir=$(readlink -f "$BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_DIRECTORY")

echo "--- :junit: Processing the junits"

set +e
docker \
  --log-level "error" \
  run \
    --rm \
    --volume "$xmls_dir:/junits" \
    --volume "$PLUGIN_DIR/ruby:/src" \
    --env "BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_JOB_UUID_FILE_PATTERN=${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_JOB_UUID_FILE_PATTERN:-}" \
    --env "BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_FAILURE_FORMAT=${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_FAILURE_FORMAT:-}" \
    --env "BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_REPORT_SLOWEST=${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_REPORT_SLOWEST:-}" \
    ruby:2.7-alpine ruby /src/bin/annotate /junits \
      > "$annotation_path"

exit_code=$?
set -e

if [[ $exit_code -eq 64 ]]; then # special exit code to signal test failures
  has_errors=1
  create_annotation=1
  annotation_style="error"
  if [[ "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_FAIL_BUILD_ON_ERROR:-false}" =~ (true|on|1) ]]; then
    echo "--- :boom: Build will fail due to errors being found"
    fail_build=1
  fi
elif [[ $exit_code -ne 0 ]]; then
  echo "--- :boom: Error when processing JUnit tests"
  exit $exit_code
fi

cat "$annotation_path"

if [ $has_errors -eq 0 ]; then
  # done in nested if to simplify outer conditions
  if [[ "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_ALWAYS_ANNOTATE:-false}" =~ (true|on|1) ]]; then
    echo "Will create annotation anyways"
    create_annotation=1
  fi
elif ! check_size; then
  echo "--- :warning: Failures too large to annotate"

  # creating a simplified version of the annotation
  mv "${annotation_path}" "${annotation_path}2"
  head -4 "${annotation_path}2" >"${annotation_path}"
  # || true is to avoid issues if no summary is found
  grep '<summary>' "${annotation_path}2" >>"${annotation_path}" || true

  if ! check_size; then
    echo "The failures are too large to create a build annotation. Please inspect the failed JUnit artifacts manually."
    create_annotation=0
  else
    echo "The failures are too large to create complete annotation, using a simplified annotation"
  fi
fi

if [ $create_annotation -ne 0 ]; then
  echo "--- :buildkite: Creating annotation"
  args=(
    --context "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_CONTEXT:-junit}"
    --style "$annotation_style"
  )
  if [[ "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_LOCAL_APPEND:-false}" =~ (true|on|1) ]]; then
    args+=( --append )
  fi
  # shellcheck disable=SC2002
  cat "$annotation_path" | buildkite-agent annotate "${args[@]}"
fi

exit $fail_build
